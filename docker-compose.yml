services:
  airflow:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    container_name: airflow
    ports:
      - "8080:8080"
    volumes:
      - ./dags:/app/dags
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
    networks:
      - app_network
    depends_on:
      - mlflow
    command: >
      bash -c "
        airflow connections create-default-connections &&
        airflow users create --username admin --firstname admin --lastname admin --role Admin --email example@gmail.com --password 123 &&
        airflow webserver &
        airflow scheduler
      "

  mlflow:
    build:
      context: .
      dockerfile: Dockerfile.mlflow
    container_name: mlflow
    ports:
      - "5000:5000"
    volumes:
      - ./dags/data:/app/data
      - ./mlflow:/app/mlflow
      - ./mlartifacts:/app/mlartifacts
    # environment:
    #   - MLFLOW_TRACKING_URI=http://0.0.0.0:5000
    #   - MLFLOW_BACKEND_STORE_URI=sqlite:///mlflow/db/mlflow.db
    command: >
      mlflow server --backend-store-uri sqlite:///mlflow/db/mlflow.db --default-artifact-root ./mlartifacts --host 0.0.0.0 --port 5000
    networks:
      - app_network
  
  spotify_api:
    build:
      context: .
      dockerfile: Dockerfile.spotify_api
    container_name: spotify_api
    volumes:
      - ./dags/data:/app/dags/data
    environment:
      - SPOTIFY_CLIENT_ID=your_spotify_client_id
      - SPOTIFY_CLIENT_SECRET=your_spotify_client_secret
      - SPOTIFY_REDIRECT_URI=http://localhost:8000/callback
    # command: >
    #   /bin/bash -c "while true; do sleep 1; done"
    networks:
      - app_network

  fastapi:
    build:
      context: .
      dockerfile: Dockerfile.fastapi
    container_name: fastapi
    ports:
      - "8000:8000"
    volumes:
      - ./dags:/app/dags
    environment:
      {}
    command: >
      uvicorn app:app --host 0.0.0.0 --port 8000
    networks:
      - app_network

  streamlit:
    build:
      context: .
      dockerfile: Dockerfile.streamlit
    container_name: streamlit
    ports:
      - "8501:8501"
    volumes:
      - ./dags:/app/dags
    environment:
      {}
    depends_on:
      - fastapi
    command: >
      streamlit run streamlit_app.py --server.port=8501 --server.address=0.0.0.0
    networks:
      - app_network

networks:
  app_network:
    driver: bridge

# docker-compose build
# docker-compose up -d
# docker-compose exec airflow bash
# docker-compose exec mlflow bash

# 권한문제 해결 > chmod -R 777 ./dags/